import { z } from 'zod';
import { useState, useEffect } from 'react';
import { useBoolean } from 'minimal-shared/hooks';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';

import Box from '@mui/material/Box';
import Card from '@mui/material/Card';
import Stack from '@mui/material/Stack';
import Button from '@mui/material/Button';
import Select from '@mui/material/Select';
import Divider from '@mui/material/Divider';
import Collapse from '@mui/material/Collapse';
import MenuItem from '@mui/material/MenuItem';
import Checkbox from '@mui/material/Checkbox';
import CardHeader from '@mui/material/CardHeader';
import Typography from '@mui/material/Typography';
import IconButton from '@mui/material/IconButton';
import InputLabel from '@mui/material/InputLabel';
import FormControl from '@mui/material/FormControl';
import CircularProgress from '@mui/material/CircularProgress';
import FormControlLabel from '@mui/material/FormControlLabel';

import { paths } from 'src/routes/paths';
import { useRouter } from 'src/routes/hooks';

import axiosInstance, { endpoints } from 'src/lib/axios';

import { toast } from 'src/components/snackbar';
import { Iconify } from 'src/components/iconify';
import { Form, Field } from 'src/components/hook-form';

// Define dropdown options
const SCHOOLS = [
  'Arakan Boys',
  'Arakan Girls',
  'Bayuni Secondary',
  'Burma Road Primary',
  'Chainda Basic',
  'Chaisa Basic',
  'Chakunkula Combined',
  'Chawama Combined',
  'Chelstone Secondary',
  'Chigwilizano',
  'Chinika Secondary',
  'Chitanda Basic',
  'Chunga Secondary',
  'Cornerstar Private',
  'Desai Basic',
  'Diana Kaimba Primary',
  'Edwin Mulongoti Primary',
  'Equatorial Education House',
  'George Central Basic',
  'Highland High School',
  'Hillcrest National Technical',
  'Hillside Primary',
  'JM Academy',
  'Justin Kabwe Basic',
  'Kabulonga Boys',
  'Kabulonga Girls',
  'Kabulonga Primary',
  'Kadma Technical Secondary',
  'Kalomo Secondary',
  'Kalundu Primary',
  'Kamanga Primary',
  'Kambule Technical Secondary',
  'Kamulanga High',
  'Kamwala Primary',
  'Kamwala Secondary',
  'Kaoma Stem Secondary School',
  'Kaunda Square Primary',
  'Libala Secondary',
  'Lotus Combined',
  'Lusaka Girls',
  'Matero Girls Secondary School',
  'Mkandawire Combined',
  'Muchinga Primary',
  'Mulongoti Primary',
  'Mumana Primary',
  'Munali Boys',
  'Munali Girls',
  'Mwavi Secondary',
  'Nelson Mandela',
  'New Kanyama Primary',
  'New Matero Secondary',
  'Ngaso Education Center',
  'Ngombe Primary',
  'Northmead Secondary',
  'Nyumba Yanga Secondary',
  'Olympia Park Secondary',
  'St Michael Secondary',
  'St Mulumba Special School',
  'St. Christopher Skills Centre',
  'Twatasha Primary',
  'Twashuka Secondary School',
  'Twin Palm Secondary',
  'Other',
];

const GENDERS = ['Male', 'Female'];
const SCHOOL_CATEGORIES = ['Legacy Academy', 'Government'];
const REGIONS = [
  'Lusaka',
  'Central',
  'Copperbelt',
  'Southern',
  'Northern',
  'Eastern',
  'Western',
  'Muchinga',
  'Luapula',
  'North-Western',
];
const PROGRAM_STATUSES = ['Active', 'Discharged'];
const YES_NO = ['Yes', 'No'];
const CATCHMENT_AREAS = [
  'Bauleni',
  'Chaisa',
  'Chawama',
  'George',
  'Ibex John Laing',
  'Kabanana',
  'Kamanga',
  'Kanyama One',
  'Kanyama Two',
  'Lusaka West',
  'Matero',
  'Misisi',
  'Mtendere',
  'Ngombe',
];
const BIRTH_RECORDS = [
  'Under five card',
  'Record of birth',
  'Birth certificate',
  'Affidavit',
  'Other',
];
const OVC_STATUSES = [
  'Single orphan (Mother passed away)',
  'Single orphan (Father passed away)',
  'Double orphan (Both mother & father passed away)',
  'Abandoned (either one or both parents could be alive but abandoned the child, and the child is kept by a caregiver)',
  'Abandoned (either one or both parents could be alive but abandoned the child, and a child is heading the household)',
  "Vulnerable (Both parents are alive but unable to meet all the child's basic needs)",
];
const LANGUAGES = [
  'Bemba',
  'Chewa',
  'Kaonde',
  'Lamba',
  'Lozi',
  'Luvale',
  'Nyanja',
  'Tonga',
  'Tumbuka',
  'English',
  'Other',
];
const READ_LANGUAGES = [
  'Bemba',
  'Chewa',
  'Kaonde',
  'Lamba',
  'Lozi',
  'Luvale',
  'Nyanja',
  'Tonga',
  'Tumbuka',
  'English',
  'Cannot read at all',
  'Other',
];
const LEARNING_CHALLENGES = [
  'Hearing challenge',
  'Sight',
  "Can't read or write",
  'Speech',
  'Mental (slow learner)',
  'Physical (disability)',
  'Home challenges',
  'Language Barrier',
  'Other',
];
const DISABILITY_TYPES = [
  'Completely blind',
  'Partially sighted',
  'Hearing impairment',
  'Speech impairment',
  'Physically challenged',
  'Mentally Challenged',
  'Other',
];
const HOUSEHOLD_CHORES = [
  'Cooking',
  'Sweeping the house',
  'Washing clothes',
  'Washing the dishes',
  'Sweeping the yard',
  'Slashing the grass around the yard',
  'Going to buy household items from the market',
  'Fixing things around the house',
  'Other',
];
const SUPPORT_TYPES = [
  'Counseling',
  'Mentorship',
  'Recreational activities',
  'School supplies',
  'School tuition',
  'Skills training',
  'Other',
];
const HEALTH_PROBLEMS = ['Malaria', 'Typhoid', 'Flu', 'Cough', 'Other'];
const LONG_TERM_ILLNESSES = [
  'Sickle cell anemia',
  'Seizures, fits, or Epilepsy',
  'Severe anemia or low blood',
  'Tuberculosis',
  'Malnutrition',
  'HIV or AIDS',
  'Other',
];

// Define the form schema
const VulnerabilityAssessmentSchema = z
  .object({
    // Staff Details
    staffId: z.string().min(1, { message: 'Staff ID is required' }),
    employeeName: z.string().min(1, { message: 'Employee name is required' }),
    employeeGender: z.enum(GENDERS, { message: 'Gender is required' }),
    date: z.coerce.date({ message: 'Date is required' }),
    region: z.enum(REGIONS, { message: 'Region is required' }),

    // Child Information
    schoolCategory: z.enum(SCHOOL_CATEGORIES, { message: 'School category is required' }),
    childFirstName: z.string().min(1, { message: 'Child first name is required' }),
    childLastName: z.string().min(1, { message: 'Child last name is required' }),
    childId: z.string().min(1, { message: 'Child ID is required' }).optional(),
    childGender: z.enum(GENDERS, { message: 'Gender is required' }),
    childAge: z.number().int().positive({ message: 'Age must be a positive number' }).optional(),
    school: z.enum(SCHOOLS, { message: 'School is required' }),
    otherSchool: z.string().optional(),
    grade: z.string().min(1, { message: 'Grade is required' }),
    class: z.string().min(1, { message: 'Class is required' }),
    programStatus: z.enum(PROGRAM_STATUSES, { message: 'Program status is required' }),
    dischargeConfirmation: z.enum(YES_NO, { message: 'Confirmation is required' }).optional(),
    catchmentArea: z.enum(CATCHMENT_AREAS, { message: 'Catchment area is required' }),
    specificResidence: z.string().min(1, { message: 'Specific area of residence is required' }),
    futureCareer: z.string().min(1, { message: 'Future career is required' }),
    favoriteHobby: z.string().min(1, { message: 'Favorite hobby is required' }),
    favoriteSport: z.string().min(1, { message: 'Favorite sport is required' }),
    gratitude: z.string().min(1, { message: 'Gratitude is required' }),
    futureHope: z.string().min(1, { message: 'Future hope is required' }),
    characteristic: z.string().min(1, { message: 'Characteristic is required' }),
    hasBirthRecord: z.enum(YES_NO, { message: 'Birth record selection is required' }),
    birthRecordType: z.enum(BIRTH_RECORDS, { message: 'Birth record type is required' }).optional(),
    ovcStatus: z.enum(OVC_STATUSES, { message: 'OVC status is required' }),

    // Guardian Details
    caregiverId: z.string().min(1, { message: 'Caregiver ID is required' }),
    guardianFirstName: z.string().min(1, { message: 'Guardian first name is required' }),
    guardianLastName: z.string().min(1, { message: 'Guardian last name is required' }),
    guardianContact: z.string().min(1, { message: 'Guardian contact number is required' }),
    primaryGuardian: z.string().min(1, { message: 'Primary guardian is required' }),
    guardianJob: z.string().min(1, { message: 'Guardian job is required' }),
    jobType: z.string().optional(),
    businessType: z.string().optional(),
    casualWorkType: z.string().optional(),
    guardianHealthConcern: z.enum(YES_NO, { message: 'Health concern selection is required' }),
    healthConcernDetails: z.string().optional(),
    guardianSpokenLanguage: z.enum(LANGUAGES, { message: 'Spoken language is required' }),
    guardianReadLanguage: z.enum(READ_LANGUAGES, { message: 'Read language is required' }),

    // Child Challenges and Household
    learningChallenges: z.enum(YES_NO, { message: 'Learning challenges selection is required' }),
    challengeTypes: z.array(z.enum(LEARNING_CHALLENGES)).optional(),
    favoriteSubject: z.string().optional(),
    schoolYearGoals: z.string().optional(),
    householdDisability: z.enum(YES_NO, { message: 'Household disability selection is required' }),
    disabilityCount: z.number().int().nonnegative().optional(),
    disabilityPerson: z.enum(['Me (Child)', 'Guardian', 'Other']).optional(),
    childDisabilityTypes: z.array(z.enum(DISABILITY_TYPES)).optional(),
    guardianDisabilityTypes: z.array(z.enum(DISABILITY_TYPES)).optional(),
    householdChores: z
      .array(z.enum(HOUSEHOLD_CHORES))
      .min(1, { message: 'At least one chore is required' }),
    householdBelow18: z.number().int().nonnegative({ message: 'Number must be non-negative' }),
    household18to60: z.number().int().nonnegative({ message: 'Number must be non-negative' }),
    householdAbove60: z.number().int().nonnegative({ message: 'Number must be non-negative' }),
    otherResidence: z.enum(YES_NO, { message: 'Other residence selection is required' }),
    otherResidenceDetails: z.string().optional(),
    otherResidenceReason: z.string().optional(),

    // Child Voice and Support
    opinionsValued: z.enum(YES_NO, { message: 'Selection is required' }),
    makeChoices: z.enum(YES_NO, { message: 'Selection is required' }),
    decisionMaker: z.enum(['Guardians', 'Teachers', 'Other']).optional(),
    askedForHelp: z.enum(YES_NO, { message: 'Selection is required' }),
    desiredSupport: z
      .array(z.enum(SUPPORT_TYPES))
      .min(1, { message: 'At least one support type is required' }),
    desiredChanges: z.string().min(1, { message: 'Desired changes are required' }),

    // Health
    healthProblem: z.enum(YES_NO, { message: 'Health problem selection is required' }),
    healthProblemType: z.enum(HEALTH_PROBLEMS).optional(),
    urgentMedicalNeed: z.enum(YES_NO, { message: 'Urgent medical need selection is required' }),
    specializedMedicalNeed: z.enum(YES_NO, {
      message: 'Specialized medical need selection is required',
    }),
    receivingMedicalCare: z.enum(YES_NO).optional(),
    poorHealth: z.enum(YES_NO).optional(),
    longTermIllness: z.enum(YES_NO, { message: 'Long term illness selection is required' }),
    longTermIllnessType: z.enum(LONG_TERM_ILLNESSES).optional(),
    dailyMedication: z.enum(YES_NO, { message: 'Daily medication selection is required' }),

    // Confirmation
    confirmInformation: z.enum(YES_NO, { message: 'Confirmation is required' }),
  })
  .refine(
    (data) => {
      if (data.school === 'Other' && !data.otherSchool) return false;
      if (data.programStatus === 'Discharged' && !data.dischargeConfirmation) return false;
      if (data.hasBirthRecord === 'Yes' && !data.birthRecordType) return false;
      if (data.guardianHealthConcern === 'Yes' && !data.healthConcernDetails) return false;
      if (
        data.learningChallenges === 'Yes' &&
        (!data.challengeTypes || data.challengeTypes.length === 0)
      )
        return false;
      if (data.householdDisability === 'Yes' && !data.disabilityCount) return false;
      if (
        data.disabilityPerson === 'Me (Child)' &&
        (!data.childDisabilityTypes || data.childDisabilityTypes.length === 0)
      )
        return false;
      if (
        data.disabilityPerson === 'Guardian' &&
        (!data.guardianDisabilityTypes || data.guardianDisabilityTypes.length === 0)
      )
        return false;
      if (
        data.otherResidence === 'Yes' &&
        (!data.otherResidenceDetails || !data.otherResidenceReason)
      )
        return false;
      if (data.healthProblem === 'Yes' && !data.healthProblemType) return false;
      if (data.specializedMedicalNeed === 'Yes' && !data.receivingMedicalCare) return false;
      if (data.receivingMedicalCare === 'Yes' && !data.poorHealth) return false;
      if (data.longTermIllness === 'Yes' && !data.longTermIllnessType) return false;
      return true;
    },
    { message: 'Please fill in the required fields' }
  );

export function JobNewEditForm({ currentAssessment }) {
  const router = useRouter();

  const [staffList, setStaffList] = useState([]);
  const [childList, setChildList] = useState([]);
  const [caregiverList, setCaregiverList] = useState([]);
  const [loadingStaff, setLoadingStaff] = useState(true);
  const [loadingChildren, setLoadingChildren] = useState(true);
  const [loadingCaregivers, setLoadingCaregivers] = useState(true);

  const openStaff = useBoolean(true);
  const openChild = useBoolean(true);
  const openGuardian = useBoolean(true);
  const openChallenges = useBoolean(true);
  const openVoice = useBoolean(true);
  const openHealth = useBoolean(true);
  const openConfirmation = useBoolean(true);

  const methods = useForm({
    mode: 'all',
    resolver: zodResolver(VulnerabilityAssessmentSchema),
    defaultValues: {
      staffId: '',
      employeeName: '',
      employeeGender: '',
      date: null,
      region: '',
      schoolCategory: '',
      childFirstName: '',
      childLastName: '',
      childId: '',
      childGender: '',
      childAge: null,
      school: '',
      otherSchool: '',
      grade: '',
      class: '',
      programStatus: '',
      dischargeConfirmation: '',
      catchmentArea: '',
      specificResidence: '',
      futureCareer: '',
      favoriteHobby: '',
      favoriteSport: '',
      gratitude: '',
      futureHope: '',
      characteristic: '',
      hasBirthRecord: '',
      birthRecordType: '',
      ovcStatus: '',
      caregiverId: '',
      guardianFirstName: '',
      guardianLastName: '',
      guardianContact: '',
      primaryGuardian: '',
      guardianJob: '',
      jobType: '',
      businessType: '',
      casualWorkType: '',
      guardianHealthConcern: '',
      healthConcernDetails: '',
      guardianSpokenLanguage: '',
      guardianReadLanguage: '',
      learningChallenges: '',
      challengeTypes: [],
      favoriteSubject: '',
      schoolYearGoals: '',
      householdDisability: '',
      disabilityCount: null,
      disabilityPerson: '',
      childDisabilityTypes: [],
      guardianDisabilityTypes: [],
      householdChores: [],
      householdBelow18: null,
      household18to60: null,
      householdAbove60: null,
      otherResidence: '',
      otherResidenceDetails: '',
      otherResidenceReason: '',
      opinionsValued: '',
      makeChoices: '',
      decisionMaker: '',
      askedForHelp: '',
      desiredSupport: [],
      desiredChanges: '',
      healthProblem: '',
      healthProblemType: '',
      urgentMedicalNeed: '',
      specializedMedicalNeed: '',
      receivingMedicalCare: '',
      poorHealth: '',
      longTermIllness: '',
      longTermIllnessType: '',
      dailyMedication: '',
      confirmInformation: '',
    },
    values: currentAssessment,
  });

  const {
    reset,
    watch,
    control,
    setValue,
    handleSubmit,
    formState: { isSubmitting },
  } = methods;

  const staffId = watch('staffId');
  const childId = watch('childId');
  const caregiverId = watch('caregiverId');

  useEffect(() => {
    const fetchStaff = async () => {
      try {
        setLoadingStaff(true);
        const response = await axiosInstance.get('/users', {
          params: { fields: 'id,first_name,last_name', filter: { status: 'active' } },
        });
        setStaffList(response.data.data || []);
      } catch (error) {
        console.error('Failed to fetch staff:', error);
        toast.error('Failed to load staff list');
      } finally {
        setLoadingStaff(false);
      }
    };

    const fetchChildren = async () => {
      try {
        setLoadingChildren(true);
        const response = await axiosInstance.get('/items/children', {
          params: { fields: 'id,first_name,last_name' },
        });
        setChildList(response.data.data || []);
      } catch (error) {
        console.error('Failed to fetch children:', error);
        toast.error('Failed to load children list');
      } finally {
        setLoadingChildren(false);
      }
    };

    const fetchCaregivers = async () => {
      try {
        setLoadingCaregivers(true);
        const response = await axiosInstance.get('/items/caregivers', {
          params: { fields: 'id,first_name,last_name' },
        });
        setCaregiverList(response.data.data || []);
      } catch (error) {
        console.error('Failed to fetch caregivers:', error);
        toast.error('Failed to load caregivers list');
      } finally {
        setLoadingCaregivers(false);
      }
    };

    fetchStaff();
    fetchChildren();
    fetchCaregivers();
  }, []);

  // Auto-prefill employeeName based on staffId
  useEffect(() => {
    if (staffId) {
      const staff = staffList.find((s) => s.id === staffId);
      if (staff) {
        setValue('employeeName', `${staff.first_name} ${staff.last_name}`);
      }
    }
  }, [staffId, staffList, setValue]);

  // Auto-prefill childFirstName and childLastName based on childId
  useEffect(() => {
    if (childId) {
      const child = childList.find((c) => c.id === childId);
      if (child) {
        setValue('childFirstName', child.first_name);
        setValue('childLastName', child.last_name);
      }
    }
  }, [childId, childList, setValue]);

  // Auto-prefill guardianFirstName and guardianLastName based on caregiverId
  useEffect(() => {
    if (caregiverId) {
      const caregiver = caregiverList.find((c) => c.id === caregiverId);
      if (caregiver) {
        setValue('guardianFirstName', caregiver.first_name);
        setValue('guardianLastName', caregiver.last_name);
      }
    }
  }, [caregiverId, caregiverList, setValue]);

  const onSubmit = handleSubmit(async (data) => {
    console.log('Form submission triggered with data:', data);
    try {
      console.log('Starting child record creation/update...');
      // Create or update child record
      // const childData = {
      //   first_name: data.childFirstName,
      //   last_name: data.childLastName,
      //   age: data.childAge,
      //   gender: data.childGender,
      //   school_category: data.schoolCategory,
      //   school: data.school === 'Other' ? data.otherSchool : data.school,
      //   grade: data.grade,
      //   class: data.class,
      //   program_status: data.programStatus,
      //   catchment_area: data.catchmentArea,
      //   ovc_status: data.ovcStatus,
      // };
    //  const childResponse = childId;
    //   if (data.childId) {
    //     childResponse = await axiosInstance.patch(`/items/children/${data.childId}`, childData);
    //   } else {
    //     childResponse = await axiosInstance.post(endpoints.children.create, childData);
    //   }

      // Create or update guardian record
      console.log('Starting guardian record creation...');
      const guardianData = {
        first_name: data.guardianFirstName,
        last_name: data.guardianLastName,
        contact_number: data.guardianContact,
        primary_guardian: data.primaryGuardian,
        job: data.guardianJob,
        job_type: data.jobType,
        business_type: data.businessType,
        casual_work_type: data.casualWorkType,
        health_concern: data.guardianHealthConcern,
        health_concern_details: data.healthConcernDetails,
        spoken_language: data.guardianSpokenLanguage,
        read_language: data.guardianReadLanguage,
      };
      console.log('Guardian data prepared:', guardianData);
      const guardianResponse = await axiosInstance.post('/items/caregivers', guardianData); // Fixed typo: 'caregiivers' → 'caregivers'
      const guardianId = guardianResponse.data.data.id;
      console.log('Guardian record created, ID:', guardianId);

      // Create vulnerability assessment record
      console.log('Starting vulnerability assessment creation...');
      const assessmentData = {
        staff_id: data.staffId,
        child_id: childId,
        guardian_id: guardianId, // Fixed: Use guardianId instead of caregiverId
        date: data.date.toISOString().split('T')[0], // Ensure date is string in YYYY-MM-DD format
        region: data.region,
        specific_residence: data.specificResidence,
        future_career: data.futureCareer,
        favorite_hobby: data.favoriteHobby,
        favorite_sport: data.favoriteSport,
        gratitude: data.gratitude,
        future_hope: data.futureHope,
        characteristic: data.characteristic,
        has_birth_record: data.hasBirthRecord,
        birth_record_type: data.birthRecordType,
        learning_challenges: data.learningChallenges,
        challenge_types: data.challengeTypes.join(','), // Convert array to comma-separated string
        favorite_subject: data.favoriteSubject,
        school_year_goals: data.schoolYearGoals,
        household_disability: data.householdDisability,
        disability_count: data.disabilityCount,
        disability_person: data.disabilityPerson,
        child_disability_types: data.childDisabilityTypes.join(','), // Convert array to string
        guardian_disability_types: data.guardianDisabilityTypes.join(','), // Convert array to string
        household_chores: data.householdChores.join(','), // Convert array to string
        household_below_18: data.householdBelow18,
        household_18_to_60: data.household18to60,
        household_above_60: data.householdAbove60,
        other_residence: data.otherResidence,
        other_residence_details: data.otherResidenceDetails,
        other_residence_reason: data.otherResidenceReason,
        opinions_valued: data.opinionsValued,
        make_choices: data.makeChoices,
        decision_maker: data.decisionMaker,
        asked_for_help: data.askedForHelp,
        desired_support: data.desiredSupport.join(','), // Convert array to string
        desired_changes: data.desiredChanges,
        health_problem: data.healthProblem,
        health_problem_type: data.healthProblemType,
        urgent_medical_need: data.urgentMedicalNeed,
        specialized_medical_need: data.specializedMedicalNeed,
        receiving_medical_care: data.receivingMedicalCare,
        poor_health: data.poorHealth,
        long_term_illness: data.longTermIllness,
        long_term_illness_type: data.longTermIllnessType,
        daily_medication: data.dailyMedication,
        confirm_information: data.confirmInformation,
      };
      console.log('Assessment data prepared:', assessmentData);

      await axiosInstance.post(endpoints.vulnerability_assessments.create, assessmentData);
      console.log('Vulnerability assessment submitted successfully');

      reset();
      toast.success(currentAssessment ? 'Assessment Updated!' : 'Assessment Created!');
      if (router && paths.dashboard && paths.dashboard.learners) {
        console.log('Navigating to learners dashboard');
        router.push(paths.dashboard.learners);
      } else {
        console.warn('Navigation failed, redirecting via window.location');
        window.location.href = '/dashboard/learners';
      }
    } catch (error) {
      console.error('Submission error:', {
        message: error.message,
        response: error.response
          ? {
              status: error.response.status,
              data: error.response.data,
            }
          : null,
      });
      toast.error(
        error.response?.data?.message || 'Failed to submit vulnerability assessment form'
      );
    }
  });

  const renderCollapseButton = (value, onToggle) => (
    <IconButton onClick={onToggle}>
      <Iconify icon={value ? 'eva:arrow-ios-downward-fill' : 'eva:arrow-ios-forward-fill'} />
    </IconButton>
  );

  const renderStaffDetails = () => (
    <Card>
      <CardHeader
        title="Staff Details"
        action={renderCollapseButton(openStaff.value, openStaff.onToggle)}
        sx={{ mb: 3 }}
      />
      <Collapse in={openStaff.value}>
        <Divider />
        <Stack spacing={3} sx={{ p: 3 }}>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Staff ID</Typography>
            <FormControl fullWidth required>
              <InputLabel>Staff ID</InputLabel>
              <Controller
                name="staffId"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Staff ID" disabled={loadingStaff}>
                    {loadingStaff ? (
                      <MenuItem disabled>
                        <CircularProgress size={20} />
                      </MenuItem>
                    ) : staffList.length === 0 ? (
                      <MenuItem disabled>No staff available</MenuItem>
                    ) : (
                      staffList.map((staff) => (
                        <MenuItem
                          key={staff.id}
                          value={staff.id}
                        >{`${staff.id}: ${staff.first_name} ${staff.last_name}`}</MenuItem>
                      ))
                    )}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Employee Name</Typography>
            <Field.Text name="employeeName" placeholder="Enter Full Name" required disabled />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Gender</Typography>
            <FormControl fullWidth required>
              <InputLabel>Gender</InputLabel>
              <Controller
                name="employeeGender"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Gender">
                    {GENDERS.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Date</Typography>
            <Field.DatePicker name="date" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Region</Typography>
            <FormControl fullWidth required>
              <InputLabel>Region</InputLabel>
              <Controller
                name="region"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Region">
                    {REGIONS.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
        </Stack>
      </Collapse>
    </Card>
  );

  const renderChildDetails = () => (
    <Card>
      <CardHeader
        title="Child Information"
        action={renderCollapseButton(openChild.value, openChild.onToggle)}
        sx={{ mb: 3 }}
      />
      <Collapse in={openChild.value}>
        <Divider />
        <Stack spacing={3} sx={{ p: 3 }}>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">School Category</Typography>
            <FormControl fullWidth required>
              <InputLabel>School Category</InputLabel>
              <Controller
                name="schoolCategory"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="School Category">
                    {SCHOOL_CATEGORIES.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Child ID</Typography>
            <FormControl fullWidth required>
              <InputLabel>Child ID</InputLabel>
              <Controller
                name="childId"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Child ID" disabled={loadingChildren}>
                    {loadingChildren ? (
                      <MenuItem disabled>
                        <CircularProgress size={20} />
                      </MenuItem>
                    ) : childList.length === 0 ? (
                      <MenuItem disabled>No children available</MenuItem>
                    ) : (
                      childList.map((child) => (
                        <MenuItem
                          key={child.id}
                          value={child.id}
                        >{`${child.id}: ${child.first_name} ${child.last_name}`}</MenuItem>
                      ))
                    )}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
          <Stack direction="row" spacing={2}>
            <Stack spacing={1.5}>
              <Typography variant="subtitle2">Child First Name</Typography>
              <Field.Text name="childFirstName" placeholder="Enter First Name" required disabled />
            </Stack>
            <Stack spacing={1.5}>
              <Typography variant="subtitle2">Child Last Name</Typography>
              <Field.Text name="childLastName" placeholder="Enter Last Name" required disabled />
            </Stack>
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Gender</Typography>
            <FormControl fullWidth required>
              <InputLabel>Gender</InputLabel>
              <Controller
                name="childGender"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Gender">
                    {GENDERS.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Age</Typography>
            <Field.Text name="childAge" type="number" placeholder="Enter Age" />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">School</Typography>
            <FormControl fullWidth required>
              <InputLabel>School</InputLabel>
              <Controller
                name="school"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="School">
                    {SCHOOLS.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
            {watch('school') === 'Other' && (
              <Field.Text name="otherSchool" placeholder="Specify Other School" required />
            )}
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Grade</Typography>
            <Field.Text name="grade" placeholder="Enter Grade" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Class</Typography>
            <Field.Text name="class" placeholder="Enter Class" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Program Status</Typography>
            <FormControl fullWidth required>
              <InputLabel>Program Status</InputLabel>
              <Controller
                name="programStatus"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Program Status">
                    {PROGRAM_STATUSES.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
            {watch('programStatus') === 'Discharged' && (
              <FormControl fullWidth required>
                <InputLabel>Are you sure the child has been discharged?</InputLabel>
                <Controller
                  name="dischargeConfirmation"
                  control={control}
                  render={({ field }) => (
                    <Select {...field} label="Discharge Confirmation">
                      {YES_NO.map((option) => (
                        <MenuItem key={option} value={option}>
                          {option}
                        </MenuItem>
                      ))}
                    </Select>
                  )}
                />
              </FormControl>
            )}
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">FLMZ Catchment Area</Typography>
            <FormControl fullWidth required>
              <InputLabel>Catchment Area</InputLabel>
              <Controller
                name="catchmentArea"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Catchment Area">
                    {CATCHMENT_AREAS.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Specific Area of Residence</Typography>
            <Field.Text name="specificResidence" placeholder="Enter Specific Area" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              What do you want to become when you complete your education?
            </Typography>
            <Field.Text name="futureCareer" placeholder="Enter Career Aspiration" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">What is your favorite hobby?</Typography>
            <Field.Text name="favoriteHobby" placeholder="Enter Hobby" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">What is your favorite sport?</Typography>
            <Field.Text name="favoriteSport" placeholder="Enter Sport" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">What are you grateful for?</Typography>
            <Field.Text name="gratitude" placeholder="Enter Gratitude" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">What do you hope for your future?</Typography>
            <Field.Text name="futureHope" placeholder="Enter Future Hope" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              What is one characteristic you want people to know about you?
            </Typography>
            <Field.Text name="characteristic" placeholder="Enter Characteristic" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Do you have a record of birth?</Typography>
            <FormControl fullWidth required>
              <InputLabel>Birth Record</InputLabel>
              <Controller
                name="hasBirthRecord"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Birth Record">
                    {YES_NO.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
            {watch('hasBirthRecord') === 'Yes' && (
              <FormControl fullWidth required>
                <InputLabel>Birth Record Type</InputLabel>
                <Controller
                  name="birthRecordType"
                  control={control}
                  render={({ field }) => (
                    <Select {...field} label="Birth Record Type">
                      {BIRTH_RECORDS.map((option) => (
                        <MenuItem key={option} value={option}>
                          {option}
                        </MenuItem>
                      ))}
                    </Select>
                  )}
                />
              </FormControl>
            )}
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Child OVC Status</Typography>
            <FormControl fullWidth required>
              <InputLabel>OVC Status</InputLabel>
              <Controller
                name="ovcStatus"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="OVC Status">
                    {OVC_STATUSES.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
        </Stack>
      </Collapse>
    </Card>
  );

  const renderGuardianDetails = () => (
    <Card>
      <CardHeader
        title="Guardian Details"
        action={renderCollapseButton(openGuardian.value, openGuardian.onToggle)}
        sx={{ mb: 3 }}
      />
      <Collapse in={openGuardian.value}>
        <Divider />
        <Stack spacing={3} sx={{ p: 3 }}>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Caregiver ID</Typography>
            <FormControl fullWidth required>
              <InputLabel>Caregiver ID</InputLabel>
              <Controller
                name="caregiverId"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Caregiver ID" disabled={loadingCaregivers}>
                    {loadingCaregivers ? (
                      <MenuItem disabled>
                        <CircularProgress size={20} />
                      </MenuItem>
                    ) : caregiverList.length === 0 ? (
                      <MenuItem disabled>No caregivers available</MenuItem>
                    ) : (
                      caregiverList.map((caregiver) => (
                        <MenuItem
                          key={caregiver.id}
                          value={caregiver.id}
                        >{`${caregiver.id}: ${caregiver.first_name} ${caregiver.last_name}`}</MenuItem>
                      ))
                    )}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
          <Stack direction="row" spacing={2}>
            <Stack spacing={1.5}>
              <Typography variant="subtitle2">Guardian First Name</Typography>
              <Field.Text
                name="guardianFirstName"
                placeholder="Enter First Name"
                required
                disabled
              />
            </Stack>
            <Stack spacing={1.5}>
              <Typography variant="subtitle2">Guardian Last Name</Typography>
              <Field.Text name="guardianLastName" placeholder="Enter Last Name" required disabled />
            </Stack>
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Guardians Contact Number</Typography>
            <Field.Text name="guardianContact" placeholder="Enter Contact Number" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Who is your primary guardian?</Typography>
            <Field.Text name="primaryGuardian" placeholder="Enter Primary Guardian" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">What type of job does your guardian do?</Typography>
            <Field.Text name="guardianJob" placeholder="Enter Occupation" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">What kind of full-time job is it?</Typography>
            <Field.Text name="jobType" placeholder="Enter Job Type" />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">What kind of a business is it?</Typography>
            <Field.Text name="businessType" placeholder="Enter Business Type" />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">What kind of casual work is it?</Typography>
            <Field.Text name="casualWorkType" placeholder="Enter Casual Work Type" />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Does your guardian have any health concern?</Typography>
            <FormControl fullWidth required>
              <InputLabel>Health Concern</InputLabel>
              <Controller
                name="guardianHealthConcern"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Health Concern">
                    {YES_NO.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
            {watch('guardianHealthConcern') === 'Yes' && (
              <Field.Text
                name="healthConcernDetails"
                placeholder="Specify Health Concern"
                required
              />
            )}
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Primary Language Spoken</Typography>
            <FormControl fullWidth required>
              <InputLabel>Spoken Language</InputLabel>
              <Controller
                name="guardianSpokenLanguage"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Spoken Language">
                    {LANGUAGES.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Primary Language Read</Typography>
            <FormControl fullWidth required>
              <InputLabel>Read Language</InputLabel>
              <Controller
                name="guardianReadLanguage"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Read Language">
                    {READ_LANGUAGES.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
        </Stack>
      </Collapse>
    </Card>
  );

  const renderChallenges = () => (
    <Card>
      <CardHeader
        title="Child Challenges and Household"
        action={renderCollapseButton(openChallenges.value, openChallenges.onToggle)}
        sx={{ mb: 3 }}
      />
      <Collapse in={openChallenges.value}>
        <Divider />
        <Stack spacing={3} sx={{ p: 3 }}>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              Do you have challenges that hinder you from learning?
            </Typography>
            <FormControl fullWidth required>
              <InputLabel>Learning Challenges</InputLabel>
              <Controller
                name="learningChallenges"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Learning Challenges">
                    {YES_NO.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
            {watch('learningChallenges') === 'Yes' && (
              <FormControl fullWidth required>
                <Typography variant="subtitle2">What are the challenges?</Typography>
                <Controller
                  name="challengeTypes"
                  control={control}
                  render={({ field }) => (
                    <Box>
                      {LEARNING_CHALLENGES.map((option) => (
                        <FormControlLabel
                          key={option}
                          control={
                            <Checkbox
                              checked={field.value.includes(option)}
                              onChange={(e) => {
                                const newValue = e.target.checked
                                  ? [...field.value, option]
                                  : field.value.filter((item) => item !== option);
                                field.onChange(newValue);
                              }}
                            />
                          }
                          label={option}
                        />
                      ))}
                    </Box>
                  )}
                />
              </FormControl>
            )}
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">What is your favorite subject in school?</Typography>
            <Field.Text name="favoriteSubject" placeholder="Enter Favorite Subject" />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">What are your goals for this school year?</Typography>
            <Field.Text name="schoolYearGoals" placeholder="Enter Goals" />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              Is there anyone in your household with a disability?
            </Typography>
            <FormControl fullWidth required>
              <InputLabel>Household Disability</InputLabel>
              <Controller
                name="householdDisability"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Household Disability">
                    {YES_NO.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
            {watch('householdDisability') === 'Yes' && (
              <>
                <Field.Text
                  name="disabilityCount"
                  type="number"
                  placeholder="How many people have a disability?"
                  required
                />
                <FormControl fullWidth required>
                  <InputLabel>Who has the disability?</InputLabel>
                  <Controller
                    name="disabilityPerson"
                    control={control}
                    render={({ field }) => (
                      <Select {...field} label="Who has the disability?">
                        {['Me (Child)', 'Guardian', 'Other'].map((option) => (
                          <MenuItem key={option} value={option}>
                            {option}
                          </MenuItem>
                        ))}
                      </Select>
                    )}
                  />
                </FormControl>
                {watch('disabilityPerson') === 'Me (Child)' && (
                  <FormControl fullWidth required>
                    <Typography variant="subtitle2">
                      What kind of disability do you have?
                    </Typography>
                    <Controller
                      name="childDisabilityTypes"
                      control={control}
                      render={({ field }) => (
                        <Box>
                          {DISABILITY_TYPES.map((option) => (
                            <FormControlLabel
                              key={option}
                              control={
                                <Checkbox
                                  checked={field.value.includes(option)}
                                  onChange={(e) => {
                                    const newValue = e.target.checked
                                      ? [...field.value, option]
                                      : field.value.filter((item) => item !== option);
                                    field.onChange(newValue);
                                  }}
                                />
                              }
                              label={option}
                            />
                          ))}
                        </Box>
                      )}
                    />
                  </FormControl>
                )}
                {watch('disabilityPerson') === 'Guardian' && (
                  <FormControl fullWidth required>
                    <Typography variant="subtitle2">
                      What kind of disability does your guardian have?
                    </Typography>
                    <Controller
                      name="guardianDisabilityTypes"
                      control={control}
                      render={({ field }) => (
                        <Box>
                          {DISABILITY_TYPES.map((option) => (
                            <FormControlLabel
                              key={option}
                              control={
                                <Checkbox
                                  checked={field.value.includes(option)}
                                  onChange={(e) => {
                                    const newValue = e.target.checked
                                      ? [...field.value, option]
                                      : field.value.filter((item) => item !== option);
                                    field.onChange(newValue);
                                  }}
                                />
                              }
                              label={option}
                            />
                          ))}
                        </Box>
                      )}
                    />
                  </FormControl>
                )}
              </>
            )}
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              What kind of chores do you help with in your household?
            </Typography>
            <FormControl fullWidth required>
              <Controller
                name="householdChores"
                control={control}
                render={({ field }) => (
                  <Box>
                    {HOUSEHOLD_CHORES.map((option) => (
                      <FormControlLabel
                        key={option}
                        control={
                          <Checkbox
                            checked={field.value.includes(option)}
                            onChange={(e) => {
                              const newValue = e.target.checked
                                ? [...field.value, option]
                                : field.value.filter((item) => item !== option);
                              field.onChange(newValue);
                            }}
                          />
                        }
                        label={option}
                      />
                    ))}
                  </Box>
                )}
              />
            </FormControl>
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              How many people living in the home are below the age of 18?
            </Typography>
            <Field.Text name="householdBelow18" type="number" placeholder="Enter Number" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              How many people living in the home are between the ages of 18-60?
            </Typography>
            <Field.Text name="household18to60" type="number" placeholder="Enter Number" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              How many people living in the home are the age of 61 or older?
            </Typography>
            <Field.Text name="householdAbove60" type="number" placeholder="Enter Number" required />
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              Is there any other place you stay overnight regularly apart from your home?
            </Typography>
            <FormControl fullWidth required>
              <InputLabel>Other Residence</InputLabel>
              <Controller
                name="otherResidence"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Other Residence">
                    {YES_NO.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
            {watch('otherResidence') === 'Yes' && (
              <>
                <Field.Text
                  name="otherResidenceDetails"
                  placeholder="Where and with whom?"
                  required
                />
                <Field.Text
                  name="otherResidenceReason"
                  placeholder="Why do you stay there?"
                  required
                />
              </>
            )}
          </Stack>
        </Stack>
      </Collapse>
    </Card>
  );

  const renderVoiceAndSupport = () => (
    <Card>
      <CardHeader
        title="Child Voice and Support"
        action={renderCollapseButton(openVoice.value, openVoice.onToggle)}
        sx={{ mb: 3 }}
      />
      <Collapse in={openVoice.value}>
        <Divider />
        <Stack spacing={3} sx={{ p: 3 }}>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              Do you feel that your opinions are valued at home and school?
            </Typography>
            <FormControl fullWidth required>
              <InputLabel>Opinions Valued</InputLabel>
              <Controller
                name="opinionsValued"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Opinions Valued">
                    {YES_NO.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              Are you allowed to make choices about your own future?
            </Typography>
            <FormControl fullWidth required>
              <InputLabel>Make Choices</InputLabel>
              <Controller
                name="makeChoices"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Make Choices">
                    {YES_NO.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
            {watch('makeChoices') === 'No' && (
              <FormControl fullWidth required>
                <InputLabel>Who makes those decisions?</InputLabel>
                <Controller
                  name="decisionMaker"
                  control={control}
                  render={({ field }) => (
                    <Select {...field} label="Decision Maker">
                      {['Guardians', 'Teachers', 'Other'].map((option) => (
                        <MenuItem key={option} value={option}>
                          {option}
                        </MenuItem>
                      ))}
                    </Select>
                  )}
                />
              </FormControl>
            )}
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              Has anyone ever asked you what kind of help you need?
            </Typography>
            <FormControl fullWidth required>
              <InputLabel>Asked for Help</InputLabel>
              <Controller
                name="askedForHelp"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Asked for Help">
                    {YES_NO.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              What kind of support do you think would help you the most?
            </Typography>
            <FormControl fullWidth required>
              <Controller
                name="desiredSupport"
                control={control}
                render={({ field }) => (
                  <Box>
                    {SUPPORT_TYPES.map((option) => (
                      <FormControlLabel
                        key={option}
                        control={
                          <Checkbox
                            checked={field.value.includes(option)}
                            onChange={(e) => {
                              const newValue = e.target.checked
                                ? [...field.value, option]
                                : field.value.filter((item) => item !== option);
                              field.onChange(newValue);
                            }}
                          />
                        }
                        label={option}
                      />
                    ))}
                  </Box>
                )}
              />
            </FormControl>
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              What change(s) would you like to see in your home, school, or community?
            </Typography>
            <Field.Text
              name="desiredChanges"
              placeholder="Enter Desired Changes"
              multiline
              rows={4}
              required
            />
          </Stack>
        </Stack>
      </Collapse>
    </Card>
  );

  const renderHealth = () => (
    <Card>
      <CardHeader
        title="Health"
        action={renderCollapseButton(openHealth.value, openHealth.onToggle)}
        sx={{ mb: 3 }}
      />
      <Collapse in={openHealth.value}>
        <Divider />
        <Stack spacing={3} sx={{ p: 3 }}>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Do you have any health problem?</Typography>
            <FormControl fullWidth required>
              <InputLabel>Health Problem</InputLabel>
              <Controller
                name="healthProblem"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Health Problem">
                    {YES_NO.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
            {watch('healthProblem') === 'Yes' && (
              <FormControl fullWidth required>
                <InputLabel>Health Problem Type</InputLabel>
                <Controller
                  name="healthProblemType"
                  control={control}
                  render={({ field }) => (
                    <Select {...field} label="Health Problem Type">
                      {HEALTH_PROBLEMS.map((option) => (
                        <MenuItem key={option} value={option}>
                          {option}
                        </MenuItem>
                      ))}
                    </Select>
                  )}
                />
              </FormControl>
            )}
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              Is the child having urgent or emergent need for medical care?
            </Typography>
            <FormControl fullWidth required>
              <InputLabel>Urgent Medical Need</InputLabel>
              <Controller
                name="urgentMedicalNeed"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Urgent Medical Need">
                    {YES_NO.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              Are you diagnosed with a specialized medical need?
            </Typography>
            <FormControl fullWidth required>
              <InputLabel>Specialized Medical Need</InputLabel>
              <Controller
                name="specializedMedicalNeed"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Specialized Medical Need">
                    {YES_NO.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
            {watch('specializedMedicalNeed') === 'Yes' && (
              <>
                <FormControl fullWidth required>
                  <InputLabel>Receiving Medical Care</InputLabel>
                  <Controller
                    name="receivingMedicalCare"
                    control={control}
                    render={({ field }) => (
                      <Select {...field} label="Receiving Medical Care">
                        {YES_NO.map((option) => (
                          <MenuItem key={option} value={option}>
                            {option}
                          </MenuItem>
                        ))}
                      </Select>
                    )}
                  />
                </FormControl>
                <FormControl fullWidth required>
                  <InputLabel>Currently Having Very Poor Health</InputLabel>
                  <Controller
                    name="poorHealth"
                    control={control}
                    render={({ field }) => (
                      <Select {...field} label="Poor Health">
                        {YES_NO.map((option) => (
                          <MenuItem key={option} value={option}>
                            {option}
                          </MenuItem>
                        ))}
                      </Select>
                    )}
                  />
                </FormControl>
              </>
            )}
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Do you have any long term illness?</Typography>
            <FormControl fullWidth required>
              <InputLabel>Long Term Illness</InputLabel>
              <Controller
                name="longTermIllness"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Long Term Illness">
                    {YES_NO.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
            {watch('longTermIllness') === 'Yes' && (
              <FormControl fullWidth required>
                <InputLabel>Long Term Illness Type</InputLabel>
                <Controller
                  name="longTermIllnessType"
                  control={control}
                  render={({ field }) => (
                    <Select {...field} label="Long Term Illness Type">
                      {LONG_TERM_ILLNESSES.map((option) => (
                        <MenuItem key={option} value={option}>
                          {option}
                        </MenuItem>
                      ))}
                    </Select>
                  )}
                />
              </FormControl>
            )}
          </Stack>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">
              Are you taking medicines daily, not just for a short-term illness, but on an everyday
              basis?
            </Typography>
            <FormControl fullWidth required>
              <InputLabel>Daily Medication</InputLabel>
              <Controller
                name="dailyMedication"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Daily Medication">
                    {YES_NO.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
        </Stack>
      </Collapse>
    </Card>
  );

  const renderConfirmation = () => (
    <Card>
      <CardHeader
        title="Kindly confirm if the information captured is correct and accurate before making your submission?"
        action={renderCollapseButton(openConfirmation.value, openConfirmation.onToggle)}
        sx={{ mb: 3 }}
      />
      <Collapse in={openConfirmation.value}>
        <Divider />
        <Stack spacing={3} sx={{ p: 3 }}>
          <Stack spacing={1.5}>
            <Typography variant="subtitle2">Confirm Information</Typography>
            <FormControl fullWidth required>
              <InputLabel>Confirm Information</InputLabel>
              <Controller
                name="confirmInformation"
                control={control}
                render={({ field }) => (
                  <Select {...field} label="Confirm Information">
                    {YES_NO.map((option) => (
                      <MenuItem key={option} value={option}>
                        {option}
                      </MenuItem>
                    ))}
                  </Select>
                )}
              />
            </FormControl>
          </Stack>
        </Stack>
      </Collapse>
    </Card>
  );

  return (
    <Form methods={methods} onSubmit={onSubmit}>
      <Stack
        spacing={{ xs: 3, md: 5 }}
        sx={{ width: '100%', minHeight: '100vh', p: 3, boxSizing: 'border-box' }}
      >
        {renderStaffDetails()}
        {renderChildDetails()}
        {renderGuardianDetails()}
        {renderChallenges()}
        {renderVoiceAndSupport()}
        {renderHealth()}
        {renderConfirmation()}
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3 }}>
          <Button
            type="submit"
            variant="contained"
            size="large"
            disabled={isSubmitting || loadingStaff || loadingChildren || loadingCaregivers}
          >
            {isSubmitting ? (
              <CircularProgress size={24} />
            ) : currentAssessment ? (
              'Save Changes'
            ) : (
              'Submit Assessment'
            )}
          </Button>
        </Box>
      </Stack>
    </Form>
  );
}
