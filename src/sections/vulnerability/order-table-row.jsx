'use client';

import { useBoolean } from 'minimal-shared/hooks';

import Button from '@mui/material/Button';
import TableRow from '@mui/material/TableRow';
import Checkbox from '@mui/material/Checkbox';
import TableCell from '@mui/material/TableCell';

import { RouterLink } from 'src/routes/components';

import { fDateTime } from 'src/utils/format-time';

import { Label } from 'src/components/label';
import { ConfirmDialog } from 'src/components/custom-dialog';

// ----------------------------------------------------------------------

export function OrderTableRow({ row, selected, onSelectRow, onDeleteRow, detailsHref, tableHead }) {
  const confirmDialog = useBoolean();

  const renderPrimaryRow = () => (
    <TableRow hover selected={selected}>
      <TableCell padding="checkbox">
        <Checkbox
          checked={selected}
          onClick={onSelectRow}
          slotProps={{
            input: {
              id: `${row.id}-checkbox`,
              'aria-label': `${row.id} checkbox`,
            },
          }}
        />
      </TableCell>

      {tableHead.map((head, index) => {
        if (!head.id) return null;
        if (head.id === 'programStatus') {
          return (
            <TableCell key={index}>
              <Label
                variant="soft"
                color={
                  (row.programStatus.toLowerCase() === 'active' && 'success') ||
                  (row.programStatus.toLowerCase() === 'discharged' && 'warning') ||
                  'default'
                }
              >
                {row.programStatus}
              </Label>
            </TableCell>
          );
        }
        if (head.id === 'date') {
          return <TableCell key={index}>{fDateTime(row[head.id])}</TableCell>;
        }
        return <TableCell key={index}>{row[head.id] || ''}</TableCell>;
      })}

      <TableCell align="right" sx={{ px: 1, whiteSpace: 'nowrap' }}>
        <Button
          variant="outlined"
          color="inherit"
          size="small"
          component={RouterLink}
          href={detailsHref}
          sx={{ mr: 1 }}
        >
          View
        </Button>
        <Button
          variant="outlined"
          color="error"
          size="small"
          onClick={confirmDialog.onTrue}
          sx={{ mr: 1 }}
        >
          Delete
        </Button>
      </TableCell>
    </TableRow>
  );

  const renderConfirmDialog = () => (
    <ConfirmDialog
      open={confirmDialog.value}
      onClose={confirmDialog.onFalse}
      title="Delete"
      content="Are you sure want to delete this vulnerability assessment?"
      action={
        <Button variant="contained" color="error" onClick={onDeleteRow}>
          Delete
        </Button>
      }
    />
  );

  return (
    <>
      {renderPrimaryRow()}
      {renderConfirmDialog()}
    </>
  );
}